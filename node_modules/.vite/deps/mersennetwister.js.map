{
  "version": 3,
  "sources": ["../../mersennetwister/src/MersenneTwister.js"],
  "sourcesContent": ["(function (root, factory) {\n    'use strict';\n\n    if (typeof exports === 'object') {\n        module.exports = factory();\n    } else if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else {\n        root.MersenneTwister = factory();\n    }\n}(this, function () {\n    /**\n     * A standalone, pure JavaScript implementation of the Mersenne Twister pseudo random number generator. Compatible\n     * with Node.js, requirejs and browser environments. Packages are available for npm, Jam and Bower.\n     *\n     * @module MersenneTwister\n     * @author Raphael Pigulla <pigulla@four66.com>\n     * @license See the attached LICENSE file.\n     * @version 0.2.3\n     */\n\n    /*\n     * Most comments were stripped from the source. If needed you can still find them in the original C code:\n     * http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/CODES/mt19937ar.c\n     *\n     * The original port to JavaScript, on which this file is based, was done by Sean McCullough. It can be found at:\n     * https://gist.github.com/banksean/300494\n     */\n    'use strict';\n\n    var MAX_INT = 4294967296.0,\n        N = 624,\n        M = 397,\n        UPPER_MASK = 0x80000000,\n        LOWER_MASK = 0x7fffffff,\n        MATRIX_A = 0x9908b0df;\n\n    /**\n     * Instantiates a new Mersenne Twister.\n     *\n     * @constructor\n     * @alias module:MersenneTwister\n     * @since 0.1.0\n     * @param {number=} seed The initial seed value.\n     */\n    var MersenneTwister = function (seed) {\n        if (typeof seed === 'undefined') {\n            seed = new Date().getTime();\n        }\n\n        this.mt = new Array(N);\n        this.mti = N + 1;\n\n        this.seed(seed);\n    };\n\n    /**\n     * Initializes the state vector by using one unsigned 32-bit integer \"seed\", which may be zero.\n     *\n     * @since 0.1.0\n     * @param {number} seed The seed value.\n     */\n    MersenneTwister.prototype.seed = function (seed) {\n        var s;\n\n        this.mt[0] = seed >>> 0;\n\n        for (this.mti = 1; this.mti < N; this.mti++) {\n            s = this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30);\n            this.mt[this.mti] =\n                (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253) + this.mti;\n            this.mt[this.mti] >>>= 0;\n        }\n    };\n\n    /**\n     * Initializes the state vector by using an array key[] of unsigned 32-bit integers of the specified length. If\n     * length is smaller than 624, then each array of 32-bit integers gives distinct initial state vector. This is\n     * useful if you want a larger seed space than 32-bit word.\n     *\n     * @since 0.1.0\n     * @param {array} vector The seed vector.\n     */\n    MersenneTwister.prototype.seedArray = function (vector) {\n        var i = 1,\n            j = 0,\n            k = N > vector.length ? N : vector.length,\n            s;\n\n        this.seed(19650218);\n\n        for (; k > 0; k--) {\n            s = this.mt[i-1] ^ (this.mt[i-1] >>> 30);\n\n            this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525))) +\n                vector[j] + j;\n            this.mt[i] >>>= 0;\n            i++;\n            j++;\n            if (i >= N) {\n                this.mt[0] = this.mt[N - 1];\n                i = 1;\n            }\n            if (j >= vector.length) {\n                j = 0;\n            }\n        }\n\n        for (k = N - 1; k; k--) {\n            s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);\n            this.mt[i] =\n                (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941)) - i;\n            this.mt[i] >>>= 0;\n            i++;\n            if (i >= N) {\n                this.mt[0] = this.mt[N - 1];\n                i = 1;\n            }\n        }\n\n        this.mt[0] = 0x80000000;\n    };\n\n    /**\n     * Generates a random unsigned 32-bit integer.\n     *\n     * @since 0.1.0\n     * @returns {number}\n     */\n    MersenneTwister.prototype.int = function () {\n        var y,\n            kk,\n            mag01 = new Array(0, MATRIX_A);\n\n        if (this.mti >= N) {\n            if (this.mti === N + 1) {\n                this.seed(5489);\n            }\n\n            for (kk = 0; kk < N - M; kk++) {\n                y = (this.mt[kk] & UPPER_MASK) | (this.mt[kk + 1] & LOWER_MASK);\n                this.mt[kk] = this.mt[kk + M] ^ (y >>> 1) ^ mag01[y & 1];\n            }\n\n            for (; kk < N - 1; kk++) {\n                y = (this.mt[kk] & UPPER_MASK) | (this.mt[kk + 1] & LOWER_MASK);\n                this.mt[kk] = this.mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 1];\n            }\n\n            y = (this.mt[N - 1] & UPPER_MASK) | (this.mt[0] & LOWER_MASK);\n            this.mt[N - 1] = this.mt[M - 1] ^ (y >>> 1) ^ mag01[y & 1];\n            this.mti = 0;\n        }\n\n        y = this.mt[this.mti++];\n\n        y ^= (y >>> 11);\n        y ^= (y << 7) & 0x9d2c5680;\n        y ^= (y << 15) & 0xefc60000;\n        y ^= (y >>> 18);\n\n        return y >>> 0;\n    };\n\n    /**\n     * Generates a random unsigned 31-bit integer.\n     *\n     * @since 0.1.0\n     * @returns {number}\n     */\n    MersenneTwister.prototype.int31 = function () {\n        return this.int() >>> 1;\n    };\n\n    /**\n     * Generates a random real in the interval [0;1] with 32-bit resolution.\n     *\n     * @since 0.1.0\n     * @returns {number}\n     */\n    MersenneTwister.prototype.real = function () {\n        return this.int() * (1.0 / (MAX_INT - 1));\n    };\n\n    /**\n     * Generates a random real in the interval ]0;1[ with 32-bit resolution.\n     *\n     * @since 0.1.0\n     * @returns {number}\n     */\n    MersenneTwister.prototype.realx = function () {\n        return (this.int() + 0.5) * (1.0 / MAX_INT);\n    };\n\n    /**\n     * Generates a random real in the interval [0;1[ with 32-bit resolution.\n     *\n     * @since 0.1.0\n     * @returns {number}\n     */\n    MersenneTwister.prototype.rnd = function () {\n        return this.int() * (1.0 / MAX_INT);\n    };\n\n    /**\n     * Generates a random real in the interval [0;1[ with 32-bit resolution.\n     *\n     * Same as .rnd() method - for consistency with Math.random() interface.\n     *\n     * @since 0.2.0\n     * @returns {number}\n     */\n    MersenneTwister.prototype.random = MersenneTwister.prototype.rnd;\n\n    /**\n     * Generates a random real in the interval [0;1[ with 53-bit resolution.\n     *\n     * @since 0.1.0\n     * @returns {number}\n     */\n    MersenneTwister.prototype.rndHiRes = function () {\n        var a = this.int() >>> 5,\n            b = this.int() >>> 6;\n\n        return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);\n    };\n\n    var instance = new MersenneTwister();\n\n    /**\n     * A static version of [rnd]{@link module:MersenneTwister#rnd} on a randomly seeded instance.\n     *\n     * @static\n     * @function random\n     * @memberof module:MersenneTwister\n     * @returns {number}\n     */\n    MersenneTwister.random = function () {\n        return instance.rnd();\n    };\n\n    return MersenneTwister;\n}));\n"],
  "mappings": "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",
  "names": []
}
