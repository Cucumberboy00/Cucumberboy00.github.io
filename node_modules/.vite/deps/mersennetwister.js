import {
  __commonJS
} from "./chunk-76J2PTFD.js";

// node_modules/mersennetwister/src/MersenneTwister.js
var require_MersenneTwister = __commonJS({
  "node_modules/mersennetwister/src/MersenneTwister.js"(exports, module) {
    (function(root, factory) {
      "use strict";
      if (typeof exports === "object") {
        module.exports = factory();
      } else if (typeof define === "function" && define.amd) {
        define(factory);
      } else {
        root.MersenneTwister = factory();
      }
    })(exports, function() {
      "use strict";
      var MAX_INT = 4294967296, N = 624, M = 397, UPPER_MASK = 2147483648, LOWER_MASK = 2147483647, MATRIX_A = 2567483615;
      var MersenneTwister = function(seed) {
        if (typeof seed === "undefined") {
          seed = (/* @__PURE__ */ new Date()).getTime();
        }
        this.mt = new Array(N);
        this.mti = N + 1;
        this.seed(seed);
      };
      MersenneTwister.prototype.seed = function(seed) {
        var s;
        this.mt[0] = seed >>> 0;
        for (this.mti = 1; this.mti < N; this.mti++) {
          s = this.mt[this.mti - 1] ^ this.mt[this.mti - 1] >>> 30;
          this.mt[this.mti] = (((s & 4294901760) >>> 16) * 1812433253 << 16) + (s & 65535) * 1812433253 + this.mti;
          this.mt[this.mti] >>>= 0;
        }
      };
      MersenneTwister.prototype.seedArray = function(vector) {
        var i = 1, j = 0, k = N > vector.length ? N : vector.length, s;
        this.seed(19650218);
        for (; k > 0; k--) {
          s = this.mt[i - 1] ^ this.mt[i - 1] >>> 30;
          this.mt[i] = (this.mt[i] ^ (((s & 4294901760) >>> 16) * 1664525 << 16) + (s & 65535) * 1664525) + vector[j] + j;
          this.mt[i] >>>= 0;
          i++;
          j++;
          if (i >= N) {
            this.mt[0] = this.mt[N - 1];
            i = 1;
          }
          if (j >= vector.length) {
            j = 0;
          }
        }
        for (k = N - 1; k; k--) {
          s = this.mt[i - 1] ^ this.mt[i - 1] >>> 30;
          this.mt[i] = (this.mt[i] ^ (((s & 4294901760) >>> 16) * 1566083941 << 16) + (s & 65535) * 1566083941) - i;
          this.mt[i] >>>= 0;
          i++;
          if (i >= N) {
            this.mt[0] = this.mt[N - 1];
            i = 1;
          }
        }
        this.mt[0] = 2147483648;
      };
      MersenneTwister.prototype.int = function() {
        var y, kk, mag01 = new Array(0, MATRIX_A);
        if (this.mti >= N) {
          if (this.mti === N + 1) {
            this.seed(5489);
          }
          for (kk = 0; kk < N - M; kk++) {
            y = this.mt[kk] & UPPER_MASK | this.mt[kk + 1] & LOWER_MASK;
            this.mt[kk] = this.mt[kk + M] ^ y >>> 1 ^ mag01[y & 1];
          }
          for (; kk < N - 1; kk++) {
            y = this.mt[kk] & UPPER_MASK | this.mt[kk + 1] & LOWER_MASK;
            this.mt[kk] = this.mt[kk + (M - N)] ^ y >>> 1 ^ mag01[y & 1];
          }
          y = this.mt[N - 1] & UPPER_MASK | this.mt[0] & LOWER_MASK;
          this.mt[N - 1] = this.mt[M - 1] ^ y >>> 1 ^ mag01[y & 1];
          this.mti = 0;
        }
        y = this.mt[this.mti++];
        y ^= y >>> 11;
        y ^= y << 7 & 2636928640;
        y ^= y << 15 & 4022730752;
        y ^= y >>> 18;
        return y >>> 0;
      };
      MersenneTwister.prototype.int31 = function() {
        return this.int() >>> 1;
      };
      MersenneTwister.prototype.real = function() {
        return this.int() * (1 / (MAX_INT - 1));
      };
      MersenneTwister.prototype.realx = function() {
        return (this.int() + 0.5) * (1 / MAX_INT);
      };
      MersenneTwister.prototype.rnd = function() {
        return this.int() * (1 / MAX_INT);
      };
      MersenneTwister.prototype.random = MersenneTwister.prototype.rnd;
      MersenneTwister.prototype.rndHiRes = function() {
        var a = this.int() >>> 5, b = this.int() >>> 6;
        return (a * 67108864 + b) * (1 / 9007199254740992);
      };
      var instance = new MersenneTwister();
      MersenneTwister.random = function() {
        return instance.rnd();
      };
      return MersenneTwister;
    });
  }
});
export default require_MersenneTwister();
/*! Bundled license information:

mersennetwister/src/MersenneTwister.js:
  (**
   * A standalone, pure JavaScript implementation of the Mersenne Twister pseudo random number generator. Compatible
   * with Node.js, requirejs and browser environments. Packages are available for npm, Jam and Bower.
   *
   * @module MersenneTwister
   * @author Raphael Pigulla <pigulla@four66.com>
   * @license See the attached LICENSE file.
   * @version 0.2.3
   *)
*/
//# sourceMappingURL=mersennetwister.js.map
